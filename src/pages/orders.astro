---
// src/pages/orders.astro
import { getSecret } from "astro:env/server";
import { createClient } from "@libsql/client";
import Layout from "../layouts/Layout.astro";
import Container from "@/components/ui/Container.astro";
import EditIcon from "@/components/icons/EditIcon.astro";
import DeleteIcon from "@/components/icons/DeleteIcon.astro";
import LogoutIcon from "@/components/icons/LogoutIcon.astro";

// Check authentication - safer approach
const authCookie = Astro.cookies.get("admin-auth");
const isAuthenticated = authCookie?.value === "true";

// If not authenticated, redirect to login
if (!isAuthenticated) {
  return Astro.redirect("/admin-login?error=auth");
}

// Parse any query parameters
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get("success");
const errorMessage = url.searchParams.get("error");

// Define the Order type with status field
interface Order {
  id: number;
  full_name: string;
  email: string;
  phone: string;
  address: string;
  wet_food_250_qty: number;
  wet_food_100_qty: number;
  treats_150_qty: number;
  created_at: string;
  status: string; // New status field
}

// Define order status options
const ORDER_STATUSES = [
  "pending",
  "processing",
  "shipped",
  "delivered",
  "cancelled",
  "refunded",
];

// Get status filter from URL if present
const statusFilter = url.searchParams.get("status") || "all";

const dbUrl = getSecret("TURSO_DATABASE_URL");
const authToken = getSecret("TURSO_AUTH_TOKEN");

if (!dbUrl || !authToken) {
  throw new Error("Missing Turso database credentials");
}

const db = createClient({
  url: dbUrl,
  authToken: authToken,
});

// Fetch orders from the database with optional status filter
let orders: Order[] = [];
try {
  let query = "SELECT * FROM orders";

  // Add status filter if not showing all
  if (statusFilter !== "all") {
    query += " WHERE status = ?";
  }

  query += " ORDER BY created_at DESC";

  const result =
    statusFilter !== "all"
      ? await db.execute(query, [statusFilter])
      : await db.execute(query);

  orders = result.rows.map((row) => ({
    id: row.id as number,
    full_name: row.full_name as string,
    email: row.email as string,
    phone: row.phone as string,
    address: row.address as string,
    wet_food_250_qty: row.wet_food_250_qty as number,
    wet_food_100_qty: row.wet_food_100_qty as number,
    treats_150_qty: row.treats_150_qty as number,
    created_at: row.created_at as string,
    status: (row.status as string) || "pending", // Default to pending if null
  }));
} catch (error) {
  console.error("Failed to fetch orders:", error);
}

// Get counts for each status for the filter badges
let statusCounts: Record<string, number> = {};
try {
  const result = await db.execute(
    "SELECT status, COUNT(*) as count FROM orders GROUP BY status"
  );

  // Initialize all statuses with 0 count
  statusCounts = ORDER_STATUSES.reduce(
    (acc, status) => {
      acc[status] = 0;
      return acc;
    },
    {} as Record<string, number>
  );

  // Add "all" count
  statusCounts["all"] = 0;

  // Update with actual counts
  result.rows.forEach((row) => {
    const status = (row.status as string) || "pending";
    const count = row.count as number;
    statusCounts[status] = count;
    statusCounts["all"] += count;
  });
} catch (error) {
  console.error("Failed to fetch status counts:", error);
}

// Function to format date
const shortenedDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
    // hour: "2-digit",
    // minute: "2-digit",
  });
};

// Function to format date
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
};

// Function to get status badge color
const getStatusColor = (status: string): string => {
  switch (status) {
    case "pending":
      return "badge-warning";
    case "processing":
      return "badge-info";
    case "shipped":
      return "badge-primary";
    case "delivered":
      return "badge-success";
    case "cancelled":
      return "badge-error";
    case "refunded":
      return "badge-neutral";
    default:
      return "badge-ghost";
  }
};

// Capitalize first letter of status for display
const formatStatus = (status: string): string => {
  return status.charAt(0).toUpperCase() + status.slice(1);
};
---

<Layout title="Orders | Paws for Rivers">
  <div class="bg-base-100 min-h-screen pt-10">
    <Container width="marginxy">
      <main class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
          <h1 class="text-3xl font-bold">Orders</h1>
          <a href="/admin-logout" class="btn btn-sm btn-error">
            <LogoutIcon class="w-6 h-6" />
            Logout</a
          >
        </div>

        {/* Display success/error messages if they exist */}
        {
          successMessage && (
            <div id="successToast" class="toast toast-end">
              <div class="alert alert-success mb-4" role="alert">
                <span>{successMessage}</span>
                <button
                  type="button"
                  class="btn btn-sm btn-circle btn-ghost"
                  aria-label="Close"
                  onclick="document.getElementById('successToast').style.display = 'none';"
                >
                  ✕
                </button>
              </div>
            </div>
          )
        }

        {
          errorMessage && (
            <div id="errorToast" class="toast toast-end">
              <div class="alert alert-error mb-4" role="alert">
                <span>{errorMessage}</span>
                <button
                  type="button"
                  class="btn btn-sm btn-circle btn-ghost"
                  aria-label="Close"
                  onclick="document.getElementById('errorToast').style.display = 'none';"
                >
                  ✕
                </button>
              </div>
            </div>
          )
        }

        {/* Status filter tabs */}
        <div class="tabs tabs-boxed mb-6">
          <a
            href="?status=all"
            class={`tab ${statusFilter === "all" ? "tab-active" : ""}`}
          >
            All
            <span class="badge ml-2">{statusCounts["all"]}</span>
          </a>
          {
            ORDER_STATUSES.map((status) => (
              <a
                href={`?status=${status}`}
                class={`tab ${statusFilter === status ? "tab-active" : ""}`}
              >
                {formatStatus(status)}
                <span class="badge ml-2">{statusCounts[status]}</span>
              </a>
            ))
          }
        </div>

        {
          orders.length === 0 ? (
            <div class="alert alert-info p-6 text-center">
              <p>
                No orders found
                {statusFilter !== "all"
                  ? ` with status "${formatStatus(statusFilter)}"`
                  : ""}
                .
              </p>
            </div>
          ) : (
            <div class="overflow-x-auto">
              <table class="table table-xs">
                <thead class="">
                  <tr class="text-left bg-base-300 border-b-0.5 border-black text-xs">
                    <th>ID</th>
                    <th>Customer</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th class="text-center">Wet Food 250g</th>
                    <th class="text-center">Wet Food 100g</th>
                    <th class="text-center">Treats 150g</th>
                    <th>Status</th>
                    <th>Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map((order) => (
                    <tr class="hover:bg-base-300">
                      <td>{order.id}</td>
                      <td>{order.full_name}</td>
                      <td>
                        <a
                          href={`mailto:${order.email}`}
                          class="link link-hover"
                        >
                          {order.email}
                        </a>
                      </td>
                      <td>
                        <a href={`tel:${order.phone}`} class="link link-hover">
                          {order.phone}
                        </a>
                      </td>
                      <td>{order.address}</td>
                      <td class="text-center">{order.wet_food_250_qty}</td>
                      <td class="text-center">{order.wet_food_100_qty}</td>
                      <td class="text-center">{order.treats_150_qty}</td>
                      <td>
                        <span
                          class={`badge badge-sm ${getStatusColor(order.status)}`}
                        >
                          {formatStatus(order.status)}
                        </span>
                      </td>
                      <td>
                        <div
                          class="tooltip"
                          data-tip={`${formatDate(order.created_at)}`}
                        >
                          <a>{shortenedDate(order.created_at)}</a>
                        </div>
                      </td>
                      <td>
                        <div class="flex gap-2">
                          <button
                            type="button"
                            class="btn btn-primary btn-xs"
                            data-order-id={order.id}
                          >
                            <EditIcon class="w-4 h-4" />
                            Edit
                          </button>
                          <button
                            type="button"
                            class="btn btn-error btn-xs"
                            data-delete-id={order.id}
                          >
                            <DeleteIcon class="w-4 h-4" />
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )
        }

        {/* Edit Modal */}
        <dialog id="editModal" class="modal">
          <div class="modal-box w-11/12 max-w-2xl">
            <h2 class="text-2xl font-bold mb-4">Edit Order</h2>
            <form id="editForm" action="/api/update-order" method="POST">
              <input type="hidden" id="orderId" name="orderId" />

              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div class="form-control">
                  <label class="label" for="fullName">
                    <span class="label-text">Full Name</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="fullName"
                    name="fullName"
                    type="text"
                    required
                  />
                </div>

                <div class="form-control">
                  <label class="label" for="email">
                    <span class="label-text">Email</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="email"
                    name="email"
                    type="email"
                    required
                  />
                </div>

                <div class="form-control">
                  <label class="label" for="phone">
                    <span class="label-text">Phone</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="phone"
                    name="phone"
                    type="text"
                    required
                  />
                </div>

                <div class="form-control">
                  <label class="label" for="address">
                    <span class="label-text">Address</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="address"
                    name="address"
                    type="text"
                    required
                  />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                <div class="form-control">
                  <label class="label" for="wetFood250">
                    <span class="label-text">Wet Food 250g</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="wetFood250"
                    name="wetFood250"
                    type="number"
                    min="0"
                    required
                  />
                </div>

                <div class="form-control">
                  <label class="label" for="wetFood100">
                    <span class="label-text">Wet Food 100g</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="wetFood100"
                    name="wetFood100"
                    type="number"
                    min="0"
                    required
                  />
                </div>

                <div class="form-control">
                  <label class="label" for="treats150">
                    <span class="label-text">Treats 150g</span>
                  </label>
                  <input
                    class="input input-bordered"
                    id="treats150"
                    name="treats150"
                    type="number"
                    min="0"
                    required
                  />
                </div>

                <div class="form-control">
                  <label class="label" for="status">
                    <span class="label-text">Status</span>
                  </label>
                  <select
                    class="select select-bordered"
                    id="status"
                    name="status"
                    required
                  >
                    {
                      ORDER_STATUSES.map((status) => (
                        <option value={status}>{formatStatus(status)}</option>
                      ))
                    }
                  </select>
                </div>
              </div>

              <div class="modal-action">
                <button
                  type="button"
                  class="btn btn-outline"
                  onclick="document.getElementById('editModal').close()"
                >
                  Cancel
                </button>
                <button type="submit" class="btn btn-primary">
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </dialog>

        {/* Delete Confirmation Modal */}
        <dialog id="deleteModal" class="modal">
          <div class="modal-box">
            <h2 class="text-2xl font-bold mb-4">Confirm Delete</h2>
            <p class="mb-6">
              Are you sure you want to delete this order? This action cannot be
              undone.
            </p>

            <form id="deleteForm" action="/api/delete-order" method="POST">
              <input type="hidden" id="deleteOrderId" name="orderId" />

              <div class="modal-action">
                <button
                  type="button"
                  class="btn btn-outline"
                  onclick="document.getElementById('deleteModal').close()"
                >
                  Cancel
                </button>
                <button type="submit" class="btn btn-error"> Delete </button>
              </div>
            </form>
          </div>
        </dialog>

        {/* Status Update Modal */}
        <dialog id="statusModal" class="modal">
          <div class="modal-box">
            <h2 class="text-2xl font-bold mb-4">Update Status</h2>
            <form
              id="statusForm"
              action="/api/update-order-status"
              method="POST"
            >
              <input type="hidden" id="statusOrderId" name="orderId" />

              <div class="form-control mb-4">
                <label class="label" for="statusSelect">
                  <span class="label-text">Order Status</span>
                </label>
                <select
                  class="select select-bordered w-full"
                  id="statusSelect"
                  name="status"
                  required
                >
                  {
                    ORDER_STATUSES.map((status) => (
                      <option value={status}>{formatStatus(status)}</option>
                    ))
                  }
                </select>
              </div>

              <div class="modal-action">
                <button
                  type="button"
                  class="btn btn-outline"
                  onclick="document.getElementById('statusModal').close()"
                >
                  Cancel
                </button>
                <button type="submit" class="btn btn-primary">
                  Update Status
                </button>
              </div>
            </form>
          </div>
        </dialog>
      </main>
    </Container>
  </div>
</Layout>

<script
  is:inline
  define:vars={{
    ordersJson: JSON.stringify(orders),
    orderStatuses: ORDER_STATUSES,
  }}
>
  // Store all orders for lookup
  const allOrders = JSON.parse(ordersJson);
  console.log("Available orders:", allOrders);

  // Function to find and edit an order by ID
  function editOrderById(orderId) {
    console.log("Looking for order ID:", orderId);

    // Find the order
    const order = allOrders.find((o) => o.id === orderId);

    if (!order) {
      console.error("Order not found:", orderId);
      alert(`Order ID ${orderId} not found`);
      return;
    }

    console.log("Found order to edit:", order);

    // Fill the form with the order data
    document.getElementById("orderId").value = order.id;
    document.getElementById("fullName").value = order.full_name;
    document.getElementById("email").value = order.email;
    document.getElementById("phone").value = order.phone;
    document.getElementById("address").value = order.address;
    document.getElementById("wetFood250").value = order.wet_food_250_qty;
    document.getElementById("wetFood100").value = order.wet_food_100_qty;
    document.getElementById("treats150").value = order.treats_150_qty;
    document.getElementById("status").value = order.status || "pending";

    // Open the modal
    const modal = document.getElementById("editModal");
    console.log("Edit modal element:", modal);
    modal.showModal();
  }

  // Function to update just the status of an order
  function updateOrderStatus(orderId) {
    console.log("Updating status for order ID:", orderId);

    // Find the order
    const order = allOrders.find((o) => o.id === orderId);

    if (!order) {
      console.error("Order not found:", orderId);
      alert(`Order ID ${orderId} not found`);
      return;
    }

    // Set the order ID in the form
    document.getElementById("statusOrderId").value = order.id;

    // Set the current status in the dropdown
    document.getElementById("statusSelect").value = order.status || "pending";

    // Open the status modal
    document.getElementById("statusModal").showModal();
  }

  // Function to edit an order directly (keep for compatibility)
  function editOrder(order) {
    console.log("Direct editing order:", order);

    // Fill the form with the order data
    document.getElementById("orderId").value = order.id;
    document.getElementById("fullName").value = order.full_name;
    document.getElementById("email").value = order.email;
    document.getElementById("phone").value = order.phone;
    document.getElementById("address").value = order.address;
    document.getElementById("wetFood250").value = order.wet_food_250_qty;
    document.getElementById("wetFood100").value = order.wet_food_100_qty;
    document.getElementById("treats150").value = order.treats_150_qty;
    document.getElementById("status").value = order.status || "pending";

    // Open the modal
    document.getElementById("editModal").showModal();
  }

  // Function to delete an order
  function deleteOrder(orderId) {
    console.log("Deleting order:", orderId, typeof orderId);
    // Make sure the orderId is properly formatted
    document.getElementById("deleteOrderId").value = String(orderId);
    document.getElementById("deleteModal").showModal();
  }

  // Function to handle automatic toast dismissal
  function setupToastDismissal() {
    // Auto-dismiss toasts after 15 seconds
    const successToast = document.getElementById("successToast");
    const errorToast = document.getElementById("errorToast");

    if (successToast) {
      setTimeout(() => {
        successToast.style.display = "none";
      }, 15000); // 15 seconds
    }

    if (errorToast) {
      setTimeout(() => {
        errorToast.style.display = "none";
      }, 15000); // 15 seconds
    }

    // Remove toast messages from URL but keep status filter if present
    if (window.history && window.history.replaceState) {
      const url = new URL(window.location.href);
      const status = url.searchParams.get("status");

      // Create a new URL with just the status parameter if it exists
      const newUrl = status
        ? `${window.location.pathname}?status=${status}`
        : window.location.pathname;

      window.history.replaceState({}, document.title, newUrl);
    }
  }

  // Add event listeners once DOM is loaded
  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM fully loaded");

    // Set up toast dismissal
    setupToastDismissal();

    // Set up click handlers for each edit button
    document.querySelectorAll("[data-order-id]").forEach((button) => {
      button.addEventListener("click", function () {
        const orderId = Number(this.getAttribute("data-order-id"));
        console.log("Edit button clicked for order ID:", orderId);
        editOrderById(orderId);
      });
    });

    // Set up click handlers for each delete button
    document.querySelectorAll("[data-delete-id]").forEach((button) => {
      button.addEventListener("click", function () {
        const orderId = this.getAttribute("data-delete-id");
        console.log("Delete button clicked for order ID:", orderId);
        deleteOrder(orderId);
      });
    });

    // Status badges click handler for quick status updates
    document.querySelectorAll("[data-status-id]").forEach((badge) => {
      badge.addEventListener("click", function () {
        const orderId = Number(this.getAttribute("data-status-id"));
        console.log("Status badge clicked for order ID:", orderId);
        updateOrderStatus(orderId);
      });
    });

    // Debug form submissions
    document
      .getElementById("editForm")
      ?.addEventListener("submit", function (e) {
        const formData = new FormData(this);
        console.log("Edit form being submitted with data:");
        for (const [key, value] of formData.entries()) {
          console.log(`${key}: ${value}`);
        }
      });

    document
      .getElementById("deleteForm")
      ?.addEventListener("submit", function (e) {
        const formData = new FormData(this);
        console.log("Delete form being submitted with data:");
        for (const [key, value] of formData.entries()) {
          console.log(`${key}: ${value}`);
        }
      });

    document
      .getElementById("statusForm")
      ?.addEventListener("submit", function (e) {
        const formData = new FormData(this);
        console.log("Status form being submitted with data:");
        for (const [key, value] of formData.entries()) {
          console.log(`${key}: ${value}`);
        }
      });
  });
</script>
