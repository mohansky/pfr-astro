---
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";
import Heading from "../ui/Heading.astro";
import MinusIcon from "../icons/MinusIcon.astro";
import PlusIcon from "../icons/PlusIcon.astro";

const result = Astro.getActionResult(actions.contactForm);
if (result?.data) {
  return Astro.redirect("/");
}

const inputErrors = isInputError(result?.error) ? result.error.fields : {};

console.log(inputErrors);
---

<style>
  /* Hide arrow spinners for quantity input fields */
  input[type="number"].quantity-input::-webkit-outer-spin-button,
  input[type="number"].quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* For Firefox */
  input[type="number"].quantity-input {
    -moz-appearance: textfield;
  }

  /* Validation styles */
  .error-message {
    /* color: hsl(var(--er)); */
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }

  input:invalid:not(:placeholder-shown),
  textarea:invalid:not(:placeholder-shown) {
    border-color: hsl(var(--er));
  }

  input:valid:not(:placeholder-shown),
  textarea:valid:not(:placeholder-shown) {
    border-color: hsl(var(--su));
  }
</style>

<div class="m-auto">
  <Heading>
    To pre order please fill out the form below. And we will get back to you.
  </Heading>

  <form
    id="contact-form"
    action={actions.contactForm}
    method="post"
    class="flex flex-col gap-6 my-10"
    novalidate
  >
    <!-- Honeypot field - hidden from users -->
    <input
      class="password-input hidden"
      type="text"
      id="a_password"
      name="a_password"
      tabindex="-1"
      autocomplete="off"
    />

    <!-- Full Name Field -->
    <div class="form-control">
      <input
        type="text"
        name="fullName"
        id="fullName"
        placeholder="Full Name"
        class="input input-bordered w-full"
        required
        minlength="3"
        pattern="^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$"
        aria-describedby="fullName-error"
      />
      <div id="fullName-error" class="error-message text-error"></div>
      {
        inputErrors.fullName && (
          <p class="error-message text-error">{inputErrors.fullName[0]}</p>
        )
      }
    </div>

    <!-- Email and Phone Fields -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="form-control">
        <input
          type="email"
          name="email"
          id="email"
          placeholder="Email Address"
          class="input input-bordered w-full"
          required
          pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
          aria-describedby="email-error"
        />
        <div id="email-error" class="error-message text-error"></div>
        {
          inputErrors.email && (
            <p class="error-message text-error">{inputErrors.email[0]}</p>
          )
        }
      </div>

      <div class="form-control">
        <input
          type="tel"
          name="phone"
          id="phone"
          placeholder="Phone Number"
          class="input input-bordered w-full"
          required
          minlength="10"
          pattern="^[0-9+\-\s()]{10,15}$"
          aria-describedby="phone-error"
        />
        <div id="phone-error" class="error-message text-error"></div>
        {
          inputErrors.phone && (
            <p class="error-message text-error">{inputErrors.phone[0]}</p>
          )
        }
      </div>
    </div>

    <!-- Product selection with quantities -->
    <div class="card bg-base-200 p-4">
      <h3 class="text-lg font-medium mb-4">Select Products</h3>
      <div id="products-error" class="error-message text-error mb-2"></div>

      <div class="space-y-4">
        <!-- Snack Attack - Cookies for Cats -->
        <div class="flex items-center gap-4">
          <label class="flex items-center cursor-pointer">
            <input
              type="checkbox"
              name="products"
              value="ymy-cookies-cats"
              class="checkbox product-checkbox"
            />
            <div class="flex flex-col">
              <span class="ml-2">Snack Attack - Cookies for Cat</span>
              <span class="text-xs ml-2 opacity-60"
                >for Cats - ₹ 400 /200 grams
              </span>
            </div>
          </label>
          <div class="flex items-center ml-auto">
            <button
              type="button"
              class="btn btn-sm btn-square quantity-decrease"
              disabled><MinusIcon class="w-6 h-6" /></button
            >
            <input
              type="number"
              name="ymy-cookies-cats"
              class="input input-bordered w-16 text-center quantity-input"
              value="0"
              min="0"
              max="10"
              readonly
            />
            <button
              type="button"
              class="btn btn-sm btn-square quantity-increase"
              ><PlusIcon class="w-6 h-6" /></button
            >
          </div>
        </div>

        <!-- Snack Attack - Cookies for Dogs -->
        <div class="flex items-center gap-4">
          <label class="flex items-center cursor-pointer">
            <input
              type="checkbox"
              name="products"
              value="ymy-cookies-dogs"
              class="checkbox product-checkbox"
            />
            <div class="flex flex-col">
              <span class="ml-2">Snack Attack - Cookies for Dogs</span>
              <span class="text-xs ml-2 opacity-60"
                >for Dogs - ₹ 400 /200 grams
              </span>
            </div>
          </label>
          <div class="flex items-center ml-auto">
            <button
              type="button"
              class="btn btn-sm btn-square quantity-decrease"
              disabled><MinusIcon class="w-6 h-6" /></button
            >
            <input
              type="number"
              name="ymy-cookies-dogs"
              class="input input-bordered w-16 text-center quantity-input"
              value="0"
              min="0"
              max="10"
              readonly
            />
            <button
              type="button"
              class="btn btn-sm btn-square quantity-increase"
              ><PlusIcon class="w-6 h-6" /></button
            >
          </div>
        </div>

        <!-- Tilapia Feast -->
        <div class="flex items-center gap-4">
          <label class="flex items-center cursor-pointer">
            <input
              type="checkbox"
              name="products"
              value="tilapia-feast"
              class="checkbox product-checkbox"
            />
            <div class="flex flex-col">
              <span class="ml-2">Tilapia Feast</span>
              <span class="text-xs ml-2 opacity-60"
                >for Dogs - ₹ 275 /200 grams
              </span>
            </div>
          </label>
          <div class="flex items-center ml-auto">
            <button
              type="button"
              class="btn btn-sm btn-square quantity-decrease"
              disabled><MinusIcon class="w-6 h-6" /></button
            >
            <input
              type="number"
              name="tilapia-feast"
              class="input input-bordered w-16 text-center quantity-input"
              value="0"
              min="0"
              max="10"
              readonly
            />
            <button
              type="button"
              class="btn btn-sm btn-square quantity-increase"
              ><PlusIcon class="w-6 h-6" /></button
            >
          </div>
        </div>

        <!-- Cat and Mousse -->
        <div class="flex items-center gap-4">
          <label class="flex items-center cursor-pointer">
            <input
              type="checkbox"
              name="products"
              value="cat-and-mousse"
              class="checkbox product-checkbox"
            />
            <div class="flex flex-col">
              <span class="ml-2">Cat and Mousse</span>
              <span class="text-xs ml-2 opacity-60"
                >for Cats - ₹ 200/80 grams</span
              >
            </div>
          </label>
          <div class="flex items-center ml-auto">
            <button
              type="button"
              class="btn btn-sm btn-square quantity-decrease"
              disabled><MinusIcon class="w-6 h-6" /></button
            >
            <input
              type="number"
              name="cat-and-mousse"
              class="input input-bordered w-16 text-center quantity-input"
              value="0"
              min="0"
              max="10"
              readonly
            />
            <button
              type="button"
              class="btn btn-sm btn-square quantity-increase"
              ><PlusIcon class="w-6 h-6" /></button
            >
          </div>
        </div>

        <!-- Pawsome fish bites -->
        <!-- <div class="flex items-center gap-4">
          <label class="flex items-center cursor-pointer">
            <input
              type="checkbox"
              name="products"
              value="freeze-dried-fish"
              class="checkbox product-checkbox"
            />
            <span class="ml-2">Pawsome fish bites</span>
          </label>
          <div class="flex items-center ml-auto">
            <button
              type="button"
              class="btn btn-sm btn-square quantity-decrease"
              disabled><MinusIcon class="w-6 h-6" /></button
            >
            <input
              type="number"
              name="freeze-dried-fish"
              class="input input-bordered w-16 text-center quantity-input"
              value="0"
              min="0"
              max="10"
              readonly
            />
            <button
              type="button"
              class="btn btn-sm btn-square quantity-increase"
              ><PlusIcon class="w-6 h-6" /></button
            >
          </div>
        </div> -->
      </div>
    </div>

    <!-- Address Field -->
    <div class="form-control">
      <textarea
        name="address"
        id="address"
        class="textarea textarea-bordered w-full"
        rows="5"
        placeholder="Your Address"
        required
        minlength="5"
        aria-describedby="address-error"></textarea>
      <div id="address-error" class="error-message text-error"></div>
      {
        inputErrors.address && (
          <p class="error-message text-error">{inputErrors.address[0]}</p>
        )
      }
    </div>

    <button type="submit" class="btn btn-primary btn-block">Submit</button>
  </form>
</div>

<script>
  import { isInputError, actions } from "astro:actions";

  // Define types for validation
  interface ValidationMessages {
    [key: string]: {
      [key: string]: string;
    };
  }

  // Define interface for error fields
  interface ErrorFields {
    [key: string]: string[];
  }

  const form = document.getElementById("contact-form") as HTMLFormElement;
  const toast = document.querySelector(".toast") as HTMLDivElement;

  // Validation messages object
  const validationMessages: ValidationMessages = {
    fullName: {
      valueMissing: "Please enter your full name",
      tooShort: "Name must be at least 3 characters long",
      patternMismatch:
        "Please enter a valid name (letters, spaces, and common name punctuation only)",
    },
    email: {
      valueMissing: "Please enter your email address",
      typeMismatch: "Please enter a valid email address",
      patternMismatch: "Please enter a valid email address",
    },
    phone: {
      valueMissing: "Please enter your phone number",
      tooShort: "Phone number must be at least 10 digits",
      patternMismatch:
        "Please enter a valid phone number (digits, +, -, spaces, and parentheses only)",
    },
    address: {
      valueMissing: "Please enter your address",
      tooShort: "Address must be at least 5 characters long",
    },
    products: {
      noneSelected: "Please select at least one product",
    },
  };

  // Function to display validation messages
  const showValidationMessage = (
    input: HTMLInputElement | HTMLTextAreaElement,
    errorElement: HTMLElement
  ): boolean => {
    const inputName = input.name === "products" ? "products" : input.id;
    const messages = validationMessages[inputName];
    let message = "";

    if (input.validity.valueMissing) {
      message = messages.valueMissing;
    } else if (input.validity.typeMismatch) {
      message = messages.typeMismatch;
    } else if (input.validity.tooShort) {
      message = messages.tooShort;
    } else if (input.validity.patternMismatch) {
      message = messages.patternMismatch;
    }

    errorElement.textContent = message;
    return message !== "";
  };

  // Function to clear validation messages
  const clearValidationMessage = (errorElement: HTMLElement): void => {
    errorElement.textContent = "";
  };

  // Product quantity handling
  const setupProductQuantities = (): void => {
    const productCheckboxes = document.querySelectorAll(".product-checkbox");
    const productsErrorElement = document.getElementById("products-error");

    productCheckboxes.forEach((checkbox) => {
      const checkboxEl = checkbox as HTMLInputElement;
      const productRow = checkboxEl.closest("div");
      if (!productRow) return;

      const quantityInput = productRow.querySelector(
        ".quantity-input"
      ) as HTMLInputElement;
      const decreaseBtn = productRow.querySelector(
        ".quantity-decrease"
      ) as HTMLButtonElement;
      const increaseBtn = productRow.querySelector(
        ".quantity-increase"
      ) as HTMLButtonElement;

      // Initialize state
      checkboxEl.addEventListener("change", () => {
        if (checkboxEl.checked) {
          quantityInput.value = "1";
          decreaseBtn.disabled = false;
          if (productsErrorElement) {
            clearValidationMessage(productsErrorElement);
          }
        } else {
          quantityInput.value = "0";
          decreaseBtn.disabled = true;

          // Check if any product is selected
          const anyProductSelected = Array.from(productCheckboxes).some(
            (cb) => (cb as HTMLInputElement).checked
          );

          if (!anyProductSelected && productsErrorElement) {
            productsErrorElement.textContent =
              validationMessages.products.noneSelected;
          }
        }
      });

      // Decrease quantity
      decreaseBtn.addEventListener("click", () => {
        let value = parseInt(quantityInput.value);
        if (value > 1) {
          quantityInput.value = (value - 1).toString();
        } else {
          quantityInput.value = "0";
          checkboxEl.checked = false;
          decreaseBtn.disabled = true;

          // Check if any product is selected
          const anyProductSelected = Array.from(productCheckboxes).some(
            (cb) => (cb as HTMLInputElement).checked
          );

          if (!anyProductSelected && productsErrorElement) {
            productsErrorElement.textContent =
              validationMessages.products.noneSelected;
          }
        }
      });

      // Increase quantity
      increaseBtn.addEventListener("click", () => {
        let value = parseInt(quantityInput.value);
        if (value < 10) {
          if (value === 0) {
            checkboxEl.checked = true;
            decreaseBtn.disabled = false;
            if (productsErrorElement) {
              clearValidationMessage(productsErrorElement);
            }
          }
          quantityInput.value = (value + 1).toString();
        }
      });
    });
  };

  // Setup validation for all inputs
  const setupValidation = (): void => {
    const fullNameInput = document.getElementById(
      "fullName"
    ) as HTMLInputElement;
    const emailInput = document.getElementById("email") as HTMLInputElement;
    const phoneInput = document.getElementById("phone") as HTMLInputElement;
    const addressInput = document.getElementById(
      "address"
    ) as HTMLTextAreaElement;

    const fullNameError = document.getElementById(
      "fullName-error"
    ) as HTMLDivElement;
    const emailError = document.getElementById("email-error") as HTMLDivElement;
    const phoneError = document.getElementById("phone-error") as HTMLDivElement;
    const addressError = document.getElementById(
      "address-error"
    ) as HTMLDivElement;

    // Add event listeners for real-time validation
    fullNameInput.addEventListener("input", () => {
      if (fullNameInput.validity.valid) {
        clearValidationMessage(fullNameError);
      } else {
        showValidationMessage(fullNameInput, fullNameError);
      }
    });

    emailInput.addEventListener("input", () => {
      if (emailInput.validity.valid) {
        clearValidationMessage(emailError);
      } else {
        showValidationMessage(emailInput, emailError);
      }
    });

    phoneInput.addEventListener("input", () => {
      if (phoneInput.validity.valid) {
        clearValidationMessage(phoneError);
      } else {
        showValidationMessage(phoneInput, phoneError);
      }
    });

    addressInput.addEventListener("input", () => {
      if (addressInput.validity.valid) {
        clearValidationMessage(addressError);
      } else {
        showValidationMessage(addressInput, addressError);
      }
    });

    // Also validate on blur for better UX
    fullNameInput.addEventListener("blur", () => {
      showValidationMessage(fullNameInput, fullNameError);
    });

    emailInput.addEventListener("blur", () => {
      showValidationMessage(emailInput, emailError);
    });

    phoneInput.addEventListener("blur", () => {
      showValidationMessage(phoneInput, phoneError);
    });

    addressInput.addEventListener("blur", () => {
      showValidationMessage(addressInput, addressError);
    });
  };

  // Call setup functions after the DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    setupProductQuantities();
    setupValidation();
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    let isValid = true;

    // Honeypot check
    const honeypot = document.getElementById("a_password") as HTMLInputElement;
    if (honeypot && honeypot.value.trim() !== "") {
      console.warn("Spam detected: honeypot field is filled.");
      return;
    }

    // Validate all fields
    const fullNameInput = document.getElementById(
      "fullName"
    ) as HTMLInputElement;
    const emailInput = document.getElementById("email") as HTMLInputElement;
    const phoneInput = document.getElementById("phone") as HTMLInputElement;
    const addressInput = document.getElementById(
      "address"
    ) as HTMLTextAreaElement;

    const fullNameError = document.getElementById(
      "fullName-error"
    ) as HTMLDivElement;
    const emailError = document.getElementById("email-error") as HTMLDivElement;
    const phoneError = document.getElementById("phone-error") as HTMLDivElement;
    const addressError = document.getElementById(
      "address-error"
    ) as HTMLDivElement;
    const productsError = document.getElementById(
      "products-error"
    ) as HTMLDivElement;

    // Validate each field
    isValid = !showValidationMessage(fullNameInput, fullNameError) && isValid;
    isValid = !showValidationMessage(emailInput, emailError) && isValid;
    isValid = !showValidationMessage(phoneInput, phoneError) && isValid;
    isValid = !showValidationMessage(addressInput, addressError) && isValid;

    // Make sure at least one product is selected
    const productCheckboxes = document.querySelectorAll(
      ".product-checkbox"
    ) as NodeListOf<HTMLInputElement>;
    const anyProductSelected = Array.from(productCheckboxes).some(
      (checkbox) => checkbox.checked
    );

    if (!anyProductSelected) {
      if (productsError) {
        productsError.textContent = validationMessages.products.noneSelected;
      }
      isValid = false;
    } else {
      if (productsError) {
        clearValidationMessage(productsError);
      }
    }

    // If validation fails, stop form submission
    if (!isValid) {
      return;
    }

    try {
      // Show loading state if desired
      const submitButton = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML =
          '<span class="loading loading-spinner loading-xs"></span> Submitting...';
      }

      // If all validation passes, submit the form
      const formData = new FormData(form);
      const { data, error } = await actions.contactForm(formData);

      if (data) {
        // Reset the form only after successful submission
        form.reset();
        setupProductQuantities(); // Reset product quantities

        // Show success toast
        if (toast) {
          toast.style.display = "block";
          setTimeout(() => {
            toast.style.display = "none";
          }, 3000);
        }

        // Optional: redirect to a success page
        // window.location.href = "/thank-you";
      } else if (error) {
        // Handle submission errors
        console.error("Form submission error:", error);

        if (isInputError(error)) {
          // Handle specific field errors
          const { fields } = error as { fields: ErrorFields };
          for (const field in fields) {
            const errorMessage = fields[field][0];
            const errorElement = document.getElementById(`${field}-error`);
            if (errorElement) {
              errorElement.textContent = errorMessage;
            }
          }
        } else {
          // Show a general error message
          alert("There was a problem submitting the form. Please try again.");
        }
      }
    } catch (error) {
      console.error("Unexpected error during form submission:", error);
      alert("An unexpected error occurred. Please try again later.");
    } finally {
      // Reset submit button if needed
      const submitButton = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.innerHTML = "Submit";
      }
    }
  });
</script>

<div class="toast toast-end" style="display: none;">
  <div class="alert alert-success">
    <span>Pre-order submitted, thank you.</span>
  </div>
</div>
