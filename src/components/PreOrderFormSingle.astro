---
import { server } from "@/actions/index";
import Heading from "./Heading.astro";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";

const result = Astro.getActionResult(actions.contactForm);
if (result?.data) {
  return Astro.redirect("/");
}

const inputErrors = isInputError(result?.error) ? result.error.fields : {};

console.log(inputErrors);

const { productname } = Astro.props;
---

<div class="m-auto">
  <Heading>
    To pre order please fill out the form below. And we will get back to you.
  </Heading>

  <form
    id="contact-form"
    action={actions.contactForm}
    method="post"
    class="flex flex-col gap-6 my-10"
  >
    <input type="hidden" name="productname" value={productname} />
    <!-- <input type="hidden" name="lastName" value={lastName} /> -->

    <input
      class="password-input"
      type="text"
      id="a_password"
      name="a_password"
      tabindex="-1"
      autocomplete="off"
    />
    <div class="grid grid-cols-2 gap-4">
      <input
        type="text"
        name="firstName"
        placeholder="First Name"
        class="input input-bordered w-full"
        required
        aria-describedby={inputErrors.firstName ? "firstName-error" : undefined}
      />
      {
        inputErrors.firstName && (
          <p id="firstName-error">{inputErrors.firstName[0]}</p>
        )
      }
      <input
        type="text"
        name="lastName"
        placeholder="Last Name"
        class="input input-bordered w-full"
      />
    </div>
    <input
      type="email"
      name="email"
      placeholder="Email Address"
      class="input input-bordered w-full"
      required
    />
    <input
      type="tel"
      name="phone"
      placeholder="Phone Number"
      class="input input-bordered w-full"
      required
    />

    <input
      type="number"
      class="input validator"
      required
      placeholder="Type a number between 1 to 10"
      min="1"
      max="10"
      title="Must be between be 1 to 10"
    />
    <p class="validator-hint">Must be between be 1 to 10</p>

    <div class="w-full max-w-xs">
      <input
        type="range"
        name="quantity"
        min="1"
        max="5"
        value="1"
        class="range"
        step="1"
      />
      <div class="flex justify-between px-2.5 mt-2 text-xs">
        <span>|</span>
        <span>|</span>
        <span>|</span>
        <span>|</span>
        <span>|</span>
      </div>
      <div class="flex justify-between px-2.5 mt-2 text-xs">
        <span>1</span>
        <span>2</span>
        <span>3</span>
        <span>4</span>
        <span>5</span>
      </div>
    </div>

    <textarea
      name="message"
      class="textarea textarea-bordered w-full"
      rows="5"
      placeholder="Your Message"
      required></textarea>

    <button type="submit" class="btn btn-primary btn-block">Submit</button>
  </form>
</div>

<script>
  import { isInputError, actions } from "astro:actions";

  const form = document.getElementById("contact-form") as HTMLFormElement;
  const toast = document.querySelector(".toast") as HTMLDivElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Honeypot check
    const honeypot = document.getElementById("honeypot") as HTMLInputElement;
    if (honeypot && honeypot.value.trim() !== "") {
      console.warn("Spam detected: honeypot field is filled.");
      return;
    }

    const formData = new FormData(form);
    const { data, error } = await actions.contactForm(formData);

    if (data) {
      form.reset();
      if (toast) {
        toast.style.display = "block";
        setTimeout(() => {
          toast.style.display = "none";
        }, 3000);
      }
    }

    if (error && isInputError(error)) {
      console.error("Input error:", error);
    }
  });

  for (const fieldset of document.querySelectorAll(
    "fieldset[data-require-one]"
  )) {
    const updateValidity = () => {
      const elements = Array.from(
        (fieldset as HTMLFieldSetElement).elements
      ).filter(
        (element): element is HTMLInputElement =>
          element instanceof HTMLInputElement
      );
      if (elements.some((e) => e.checked)) {
        elements[0].setCustomValidity("");
      } else {
        elements[0].setCustomValidity("At least one required!");
      }
    };
    const form = (fieldset as HTMLFieldSetElement).form;
    if (form) {
      form.addEventListener("change", updateValidity);
    }
    updateValidity();
  }
</script>

<div class="toast" style="display: none;">
  <div class="alert alert-success">
    <span>Form submitted, thank you for your message.</span>
  </div>
</div>
